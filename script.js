// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tasks = [];
let currentUser = 'maxim';
let allTasks = [];
let currentTaskId = null; // ID —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let isEditing = false; // –§–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const users = {
    maxim: { name: '–ú–∞–∫—Å–∏–º', avatar: 'üë®‚Äçüíº' },
    mark: { name: '–ú–∞—Ä–∫', avatar: 'üë®‚Äçüíª' }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase
function checkFirebaseConnection() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Firebase
    if (firebase.app()) {
        console.log('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', firebase.app().options);
    } else {
        console.error('‚ùå Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (database) {
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const testRef = database.ref('test_connection');
        testRef.set({
            timestamp: new Date().toISOString(),
            message: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'
        })
        .then(() => {
            console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            return testRef.remove();
        })
        .then(() => {
            console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
            showNotification('Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        })
        .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
            showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase', 'error');
        });
        
        return true;
    } else {
        console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        return false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase
    checkFirebaseConnection();
    
    loadCurrentUser();
    loadTasks();
    loadAllTasks();
    renderTasks();
    renderAllTasks();
    setupEventListeners();
    setupFirebaseListeners();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    document.getElementById('taskForm').addEventListener('submit', handleTaskSubmit);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    window.addEventListener('click', function(event) {
        const modal = document.getElementById('taskModal');
        if (event.target === modal) {
            closeModal();
        }
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π Firebase
function setupFirebaseListeners() {
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Firebase –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Object.keys(users).forEach(userId => {
        const userRef = database.ref(`users/${userId}/tasks`);
        userRef.on('value', (snapshot) => {
            const data = snapshot.val();
            if (data) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if (userId === currentUser) {
                    tasks = Object.values(data);
                    renderTasks();
                }
                loadAllTasks();
                renderAllTasks();
                showNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', 'info');
            }
        });
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ Firebase
function saveTasks() {
    const tasksObject = {};
    tasks.forEach(task => {
        tasksObject[task.id] = task;
    });
    
    database.ref(`users/${currentUser}/tasks`).set(tasksObject);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ Firebase
function loadTasks() {
    database.ref(`users/${currentUser}/tasks`).once('value')
        .then((snapshot) => {
            const data = snapshot.val();
            if (data) {
                tasks = Object.values(data);
            } else {
                tasks = [];
            }
            renderTasks();
        })
        .catch((error) => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', error);
            tasks = [];
            renderTasks();
        });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ Firebase
function loadAllTasks() {
    allTasks = [];
    const promises = Object.keys(users).map(userId => {
        return database.ref(`users/${userId}/tasks`).once('value')
            .then((snapshot) => {
                const data = snapshot.val();
                if (data) {
                    const userTasks = Object.values(data);
                    userTasks.forEach(task => {
                        task.userId = userId;
                        task.userName = users[userId].name;
                        task.userAvatar = users[userId].avatar;
                    });
                    allTasks = allTasks.concat(userTasks);
                }
            })
            .catch((error) => {
                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            });
    });
    
    Promise.all(promises).then(() => {
        renderAllTasks();
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function getDeviceId() {
    let deviceId = localStorage.getItem('deviceId');
    if (!deviceId) {
        deviceId = 'device_' + Date.now() + '_' + Math.random().toString(36).substr(2);
        localStorage.setItem('deviceId', deviceId);
    }
    return deviceId;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveCurrentUser() {
    localStorage.setItem('currentUser', currentUser);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadCurrentUser() {
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser && users[savedUser]) {
        currentUser = savedUser;
        document.getElementById('userSelect').value = currentUser;
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function switchUser() {
    const userSelect = document.getElementById('userSelect');
    const newUser = userSelect.value;
    
    if (newUser !== currentUser) {
        currentUser = newUser;
        saveCurrentUser();
        loadTasks();
        loadAllTasks();
        renderTasks();
        renderAllTasks();
        showNotification(`–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${users[currentUser].name}`, 'info');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    document.getElementById(`${tabName}-tab`).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
    if (tabName === 'all') {
        loadAllTasks();
        renderAllTasks();
    } else {
        renderTasks();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
function renderTasks() {
    const columns = document.querySelectorAll('#personal-tab .column');
    
    columns.forEach(column => {
        const status = column.getAttribute('data-status');
        const taskList = column.querySelector('.task-list');
        const taskCount = column.querySelector('.task-count');
        
        taskList.innerHTML = '';
        
        const columnTasks = tasks.filter(task => task.status === status);
        taskCount.textContent = columnTasks.length;
        
        columnTasks.forEach(task => {
            const taskElement = createTaskElement(task);
            taskList.appendChild(taskElement);
        });
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
function renderAllTasks() {
    const columns = document.querySelectorAll('#all-tab .column');
    
    columns.forEach(column => {
        const status = column.getAttribute('data-status');
        const taskList = column.querySelector('.task-list');
        const taskCount = column.querySelector('.task-count');
        
        taskList.innerHTML = '';
        
        const columnTasks = allTasks.filter(task => task.status === status);
        taskCount.textContent = columnTasks.length;
        
        columnTasks.forEach(task => {
            const taskElement = createAllTasksElement(task);
            taskList.appendChild(taskElement);
        });
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏
function createTaskElement(task) {
    const taskElement = document.createElement('div');
    taskElement.className = 'task';
    taskElement.draggable = true;
    taskElement.setAttribute('data-task-id', task.id);
    
    taskElement.innerHTML = `
        <div class="task-title">${escapeHtml(task.title)}</div>
        ${task.description ? `<div class="task-description">${escapeHtml(task.description)}</div>` : ''}
        <span class="task-priority priority-${task.priority}">${getPriorityText(task.priority)}</span>
        <div class="task-actions">
            <button class="task-action-btn edit" onclick="editTask('${task.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                <i class="fas fa-edit"></i>
            </button>
            <button class="task-action-btn delete" onclick="deleteTask('${task.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    `;
    
    taskElement.addEventListener('dragstart', handleDragStart);
    taskElement.addEventListener('dragend', handleDragEnd);
    
    return taskElement;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function createAllTasksElement(task) {
    const taskElement = document.createElement('div');
    taskElement.className = 'task';
    taskElement.draggable = true;
    taskElement.setAttribute('data-task-id', task.id);
    taskElement.setAttribute('data-user-id', task.userId);
    
    taskElement.innerHTML = `
        <div class="task-title">${escapeHtml(task.title)} ${task.userAvatar}</div>
        ${task.description ? `<div class="task-description">${escapeHtml(task.description)}</div>` : ''}
        <span class="task-priority priority-${task.priority}">${getPriorityText(task.priority)}</span>
        <div class="task-actions">
            <button class="task-action-btn edit" onclick="editTask('${task.id}', '${task.userId}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                <i class="fas fa-edit"></i>
            </button>
            <button class="task-action-btn delete" onclick="deleteTask('${task.id}', '${task.userId}')" title="–£–¥–∞–ª–∏—Ç—å">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    `;
    
    taskElement.addEventListener('dragstart', handleDragStart);
    taskElement.addEventListener('dragend', handleDragEnd);
    
    return taskElement;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
function getPriorityText(priority) {
    const priorities = {
        'low': '–ù–∏–∑–∫–∏–π',
        'medium': '–°—Ä–µ–¥–Ω–∏–π',
        'high': '–í—ã—Å–æ–∫–∏–π',
        'urgent': '–°—Ä–æ—á–Ω—ã–π'
    };
    return priorities[priority] || priority;
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
function canMoveTask(currentStatus, newStatus) {
    const statusOrder = ['todo', 'in-progress', 'review', 'done'];
    const currentIndex = statusOrder.indexOf(currentStatus);
    const newIndex = statusOrder.indexOf(newStatus);
    return newIndex === currentIndex + 1;
}

// Drag and Drop
function handleDragStart(e) {
    e.target.classList.add('dragging');
    const taskId = e.target.getAttribute('data-task-id');
    e.dataTransfer.setData('text/plain', taskId);
    
    document.querySelectorAll('.task-list').forEach(list => {
        list.classList.remove('drag-over');
        list.classList.remove('drag-over-invalid');
    });
}

function handleDragEnd(e) {
    e.target.classList.remove('dragging');
}

function allowDrop(e) {
    e.preventDefault();
    
    const draggedTaskId = e.dataTransfer.getData('text/plain');
    if (!draggedTaskId) return;
    
    const isAllTasks = e.currentTarget.closest('#all-tab');
    let currentTask;
    
    if (isAllTasks) {
        currentTask = allTasks.find(t => t.id === draggedTaskId);
    } else {
        currentTask = tasks.find(t => t.id === draggedTaskId);
    }
    
    if (!currentTask) return;
    
    const targetStatus = e.currentTarget.closest('.column').getAttribute('data-status');
    
    if (canMoveTask(currentTask.status, targetStatus)) {
        e.currentTarget.classList.add('drag-over');
    } else {
        e.currentTarget.classList.add('drag-over-invalid');
    }
}

function drop(e) {
    e.preventDefault();
    const taskId = e.dataTransfer.getData('text/plain');
    const newStatus = e.currentTarget.closest('.column').getAttribute('data-status');
    
    document.querySelectorAll('.task-list').forEach(list => {
        list.classList.remove('drag-over');
        list.classList.remove('drag-over-invalid');
    });
    
    const isAllTasks = e.currentTarget.closest('#all-tab');
    
    if (isAllTasks) {
        const task = allTasks.find(t => t.id === taskId);
        if (task && task.status !== newStatus) {
            if (!canMoveTask(task.status, newStatus)) {
                showNotification('–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Å–ø—Ä–∞–≤–∞', 'error');
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Firebase
            database.ref(`users/${task.userId}/tasks/${taskId}/status`).set(newStatus)
                .then(() => {
                    showNotification(`–ó–∞–¥–∞—á–∞ ${task.userName} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞`, 'success');
                })
                .catch((error) => {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
                    showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', 'error');
                });
        }
    } else {
        const task = tasks.find(t => t.id === taskId);
        if (task && task.status !== newStatus) {
            if (!canMoveTask(task.status, newStatus)) {
                showNotification('–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Å–ø—Ä–∞–≤–∞', 'error');
                return;
            }
            
            task.status = newStatus;
            saveTasks();
            showNotification('–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞', 'success');
        }
    }
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function openAddTaskModal(status = null) {
    const modal = document.getElementById('taskModal');
    const form = document.getElementById('taskForm');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    isEditing = false;
    currentTaskId = null;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    form.reset();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    document.getElementById('modalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É';
    
    if (status) {
        document.getElementById('taskStatus').value = status;
    }
    
    modal.style.display = 'block';
    document.getElementById('taskTitle').focus();
}

function closeModal() {
    document.getElementById('taskModal').style.display = 'none';
    isEditing = false;
    currentTaskId = null;
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
function editTask(taskId, userId = null) {
    let task;
    
    if (userId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ "–í—Å–µ –∑–∞–¥–∞—á–∏"
        task = allTasks.find(t => t.id === taskId && t.userId === userId);
        if (!task) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (task.userId !== currentUser) {
            showNotification('–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏', 'error');
            return;
        }
    } else {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ "–ú–æ–∏ –∑–∞–¥–∞—á–∏"
        task = tasks.find(t => t.id === taskId);
        if (!task) return;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
    document.getElementById('taskTitle').value = task.title;
    document.getElementById('taskDescription').value = task.description || '';
    document.getElementById('taskPriority').value = task.priority;
    document.getElementById('taskStatus').value = task.status;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    isEditing = true;
    currentTaskId = taskId;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('modalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É';
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('taskModal').style.display = 'block';
    document.getElementById('taskTitle').focus();
}

function deleteTask(taskId, userId = null) {
    let task;
    
    if (userId) {
        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ "–í—Å–µ –∑–∞–¥–∞—á–∏"
        task = allTasks.find(t => t.id === taskId && t.userId === userId);
        if (!task) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (task.userId !== currentUser) {
            showNotification('–ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏', 'error');
            return;
        }
    } else {
        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ "–ú–æ–∏ –∑–∞–¥–∞—á–∏"
        task = tasks.find(t => t.id === taskId);
        if (!task) return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${task.title}"?`)) {
        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
        if (userId) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ allTasks
            allTasks = allTasks.filter(t => !(t.id === taskId && t.userId === userId));
        } else {
            // –£–¥–∞–ª—è–µ–º –∏–∑ tasks
            tasks = tasks.filter(t => t.id !== taskId);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
        saveTasks();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        renderTasks();
        renderAllTasks();
        
        showNotification('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
function viewTask(taskId, userId = null) {
    let task;
    
    if (userId) {
        task = allTasks.find(t => t.id === taskId && t.userId === userId);
    } else {
        task = tasks.find(t => t.id === taskId);
    }
    
    if (!task) return;
    
    currentTaskId = taskId;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
    const taskDetails = document.getElementById('taskDetails');
    taskDetails.innerHTML = `
        <div class="task-detail-item">
            <strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${escapeHtml(task.title)}
        </div>
        ${task.description ? `
        <div class="task-detail-item">
            <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${escapeHtml(task.description)}
        </div>
        ` : ''}
        <div class="task-detail-item">
            <strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> <span class="task-priority priority-${task.priority}">${getPriorityText(task.priority)}</span>
        </div>
        <div class="task-detail-item">
            <strong>–°—Ç–∞—Ç—É—Å:</strong> ${getStatusText(task.status)}
        </div>
        <div class="task-detail-item">
            <strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${new Date(task.createdAt).toLocaleDateString('ru-RU')}
        </div>
        ${userId ? `
        <div class="task-detail-item">
            <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ${task.userAvatar} ${escapeHtml(task.userName)}
        </div>
        ` : ''}
    `;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('viewTaskModal').style.display = 'block';
}

function closeViewModal() {
    document.getElementById('viewTaskModal').style.display = 'none';
    currentTaskId = null;
}

function editCurrentTask() {
    closeViewModal();
    if (currentTaskId) {
        editTask(currentTaskId);
    }
}

function deleteCurrentTask() {
    if (currentTaskId && confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
        deleteTask(currentTaskId);
        closeViewModal();
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
    const statuses = {
        'todo': '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é',
        'in-progress': '–í —Ä–∞–±–æ—Ç–µ',
        'review': '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
        'done': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
    };
    return statuses[status] || status;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
function handleTaskSubmit(e) {
    e.preventDefault();
    
    const taskData = {
        title: document.getElementById('taskTitle').value,
        description: document.getElementById('taskDescription').value,
        priority: document.getElementById('taskPriority').value,
        status: document.getElementById('taskStatus').value
    };
    
    if (isEditing && currentTaskId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
        const taskIndex = tasks.findIndex(t => t.id === currentTaskId);
        if (taskIndex !== -1) {
            tasks[taskIndex] = { ...tasks[taskIndex], ...taskData };
            saveTasks();
            closeModal();
            showNotification('–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
        }
    } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        const newTask = {
            id: generateId(),
            ...taskData,
            createdAt: new Date().toISOString()
        };
        
        tasks.push(newTask);
        saveTasks();
        closeModal();
        showNotification('–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞', 'success');
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 3000);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.switchUser = switchUser;
window.switchTab = switchTab;
window.openAddTaskModal = openAddTaskModal;
window.closeModal = closeModal;
window.closeViewModal = closeViewModal;
window.editCurrentTask = editCurrentTask;
window.deleteCurrentTask = deleteCurrentTask;
window.editTask = editTask;
window.deleteTask = deleteTask;
window.viewTask = viewTask;
window.allowDrop = allowDrop;
window.drop = drop; 